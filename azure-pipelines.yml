trigger:
- release/*
  
pool:
  vmImage: windows-latest

parameters:
- name: doPublish
  default: false
  type: boolean
- name: doDeploy
  default: false
  type: boolean
- name: frontDeploy
  default: true
  type: boolean
- name: backDeploy
  default: false
  type: boolean

variables:
- name: buildConfiguration
  value: 'Release'

resources:
  repositories:
  - repository: inss-devops-common-lib
    type: github
    endpoint: InsolvencyService
    name: InsolvencyService/inss-devops-common-lib
    ref: develop
    
stages:
- stage: BuildTest
  displayName: 'Build and Test'
  jobs:  
    - job: 
      steps:
      - task: UseDotNet@2
        inputs:
          version: '6.0.x'

      - task: DotNetCoreCLI@2
        displayName: NuGet Restore
        inputs:
          command: 'restore'
          projects: '**/INSS.FIP.sln'
  
      - task: DotNetCoreCLI@2
        displayName: 'Build Solution'
        inputs:
          command: 'build'
          arguments: '--configuration $(buildConfiguration)'        

      - task: DotNetCoreCLI@2
        displayName: 'Run Tests'
        inputs:
          command: test
          projects: '**/*Tests/*.csproj'
          arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

      - task: DotNetCoreCLI@2
        displayName: 'Publish Project'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '**/*.csproj'
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        condition: eq('${{ parameters.doPublish}}', 'true')

      - script: ls -l

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Artifact'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'INSS.FIP'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- stage: DeployDev_FrontEnd
  displayName: 'Deploy Frontend to Dev'
  condition: and(and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')), eq('${{ parameters.frontDeploy}}', 'true'))
  variables:
    - group: FIP-Dev
  jobs:
    - template: deploy-jobs-template-app.yml
      parameters:
        environment: 'Dev'
        fipEnvironment: $(FIPEnvironment)
        zipFile: 'INSS.FIP.zip'
      continueOnError: true

- stage: DeployDev_BackEnd
  displayName: 'Deploy Backend to Dev'
  condition: and(and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')), eq('${{ parameters.backDeploy}}', 'true'))
  variables:
    - group: FIP-Dev
  jobs:
    - template: deploy-jobs-template-func.yml
      parameters:
        environment: 'Dev'
        fipEnvironment: $(FIPEnvironment)
        zipFile: 'INSS.FIP.FnApp.zip'

###- stage: DeploySIT
###  displayName: 'Deploy to SIT'
###  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
###  variables:
###    - group: FIP-SIT
###  jobs:
###  - job: FrontEnd
###    condition: eq('${{ parameters.frontDeploy}}', 'true')
###    steps:
###    - template: deploy-jobs-template-app.yml
###      parameters:
###        environment: 'SIT'
###        fipEnvironment: $(FIPEnvironment)
###        zipFile: 'INSS.FIP.zip'
###  - job: BackEnd
###    condition: eq('${{ parameters.backDeploy}}', 'true')
###    steps:
###    - template: deploy-jobs-template-func.yml
###      parameters:
###        environment: 'SIT'
###        fipEnvironment: $(FIPEnvironment)
###        zipFile: 'INSS.FIP.FnApp.zip'
###
###- stage: DeployPreProd
###  displayName: 'Deploy to PreProd'
###  condition: and(succeeded(), contains(variables['build.sourceBranch'], 'refs/heads/release/'))
###  variables:
###    - group: FIP-PreProd
###  jobs:
###  - job: FrontEnd
###    condition: eq('${{ parameters.frontDeploy}}', 'true')
###    steps:
###    - template: deploy-jobs-template-app.yml
###      parameters:
###        environment: 'PreProd'
###        fipEnvironment: $(FIPEnvironment)
###        zipFile: 'INSS.FIP.zip'
###  - job: BackEnd
###    condition: eq('${{ parameters.backDeploy}}', 'true')
###    steps:
###    - template: deploy-jobs-template-func.yml
###      parameters:
###        environment: 'PreProd'
###        fipEnvironment: $(FIPEnvironment)
###        zipFile: 'INSS.FIP.FnApp.zip'
###
# - stage: DeployProd
#   displayName: 'Deploy to Prod'
#   condition: and(succeeded(), contains(variables['build.sourceBranch'], 'refs/heads/release/'))
#   variables:
#     - group: FIP-Prod
#   jobs:
#   - job: FrontEnd
#     condition: eq('${{ parameters.frontDeploy}}', 'true')
#     steps:
#     - template: deploy-jobs-template-app.yml
#       parameters:
#         environment: 'Prod'
#         fipEnvironment: $(FIPEnvironment)
#         zipFile: 'INSS.FIP.zip'
#   - job: BackEnd
#     condition: eq('${{ parameters.backDeploy}}', 'true')
#     steps:
#     - template: deploy-jobs-template-func.yml
#       parameters:
#         environment: 'Prod'
#         fipEnvironment: $(FIPEnvironment)
#         zipFile: 'INSS.FIP.FnApp.zip'
