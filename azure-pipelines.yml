trigger:
- release/*
  
pool:
  vmImage: windows-latest

parameters:
- name: doPublish
  default: false
  type: boolean

variables:
- name: buildConfiguration
  value: 'Release'

resources:
  repositories:
  - repository: inss-devops-common-lib
    type: github
    endpoint: InsolvencyService
    name: InsolvencyService/inss-devops-common-lib
    ref: develop
    
stages:
- stage: BuildTest
  displayName: 'Build and Test'
  jobs:  
    - job: 
      steps:
      - task: UseDotNet@2
        inputs:
          version: '6.0.x'

      - task: DotNetCoreCLI@2
        displayName: NuGet Restore
        inputs:
          command: 'restore'
          projects: '**/INSS.FIP.sln'
  
      - task: DotNetCoreCLI@2
        displayName: 'Build Solution'
        inputs:
          command: 'build'
          arguments: '--configuration $(buildConfiguration)'        

      - task: DotNetCoreCLI@2
        displayName: 'Run Tests'
        inputs:
          command: test
          projects: '**/*Tests/*.csproj'
          arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

      - task: DotNetCoreCLI@2
        displayName: 'Publish Project'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '**/*.csproj'
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        condition: eq('${{ parameters.doPublish}}', 'true')

      - script: ls -l

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Artifact'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'INSS.FIP'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- stage: DeployDev
  displayName: 'Deploy to Dev'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  variables:
    - group: FIP-Dev
  jobs:
    - template: deploy-jobs-template.yml
      parameters:
        environment: 'Dev'
        fipEnvironment: $(FIPEnvironment)

- stage: DeploySIT
  displayName: 'Deploy to SIT'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  variables:
    - group: FIP-SIT
  jobs:
    - template: deploy-jobs-template.yml
      parameters:
        environment: 'SIT'
        fipEnvironment: $(FIPEnvironment)

- stage: DeployPreProd
  displayName: 'Deploy to PreProd'
  condition: and(succeeded(), contains(variables['build.sourceBranch'], 'refs/heads/release/'))
  variables:
    - group: FIP-PreProd
  jobs:
    - template: deploy-jobs-template.yml
      parameters:
        environment: 'PreProd'
        fipEnvironment: $(FIPEnvironment)

# - stage: DeployProd
#   displayName: 'Deploy to Prod'
#   condition: and(succeeded(), contains(variables['build.sourceBranch'], 'refs/heads/release/'))
#   variables:
#     - group: FIP-Prod
#   jobs:
#     - template: deploy-jobs-template.yml
#       parameters:
#         environment: 'Prod'
#         fipEnvironment: $(FIPEnvironment)
