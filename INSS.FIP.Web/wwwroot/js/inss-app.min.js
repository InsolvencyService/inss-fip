var InssAppErrorSummaryValidation = function () { },
    inssAppErrorSummaryValidation = (
        InssAppErrorSummaryValidation.prototype = {
            initialise: function () {
                this.formValidationSelectorClassName = "form.inss-app-validation",
                    this.fieldErrorClassName = "field-validation-error",
                    this.govukErrorMessageClassName = "govuk-error-message",
                    this.govukGroupErrorClassName = "govuk-form-group--error",
                    this.govukGroupClassName = "govuk-form-group",
                    this.govukInputErrorClassName = "govuk-input--error",
                    this.govukTextAreaErrorClassName = "govuk-textarea--error",
                    this.inssAppHide = "inss-app-hide",
                    this.mainErrorSummaryId = "inss-app-ErrorSummary",
                    0 < document.getElementById(this.formValidationSelectorClassName).length && (this.initialiseFieldValidationChangeCapture(),
                        this.initialiseValidationMessageChangeCapture(), this.showErrorInPageTitle(this.mainErrorSummaryId))
            },
            showErrorInPageTitle: function (r, i) {
                const e = document.getElementById("#" + r);

                var s = this.anyVisibleErrorSummaryErrors(e),
                    i = (s ? (e.removeClass(this.inssAppHide),
                        null != i && i && e.focus()) : e.addClass(this.inssAppHide), "Error: "),
                    r = 0 === document.title.indexOf(i);
                r && !s ? document.title = document.title.substring(i.length) : !r && s && (document.title = i + document.title)
            },
            anyVisibleErrorSummaryErrors: function (r) {
                const e = document.getElementById(r);

                for (var i = e.find("LI"), s = 0; s < i.length; s++)
                    if ("" != document.getElementById(i[s]).text())
                        return !0;
                return !1
            },
            initialiseFieldValidationChangeCapture: function () {
                r = this.addClass,
                    this.addClass = function () {
                    return r.apply(
                        this, arguments),
                        this.trigger("classChanged"),
                        this
                    },
                    i = this.removeClass,
                    this.removeClass = function () {
                    return i.apply(this, arguments),
                        this.trigger("classChanged"), this
                    };
                var r, i, s = this.formValidationSelectorClassName + " ." + this.govukErrorMessageClassName, a = this;

                const elements = document.getElementsByClassName(s);
                elements.each(function () {
                    a.initialiseFieldErrorClassChangeCapture(this)
                }), elements.on("classChanged", function () { a.initialiseFieldErrorClassChangeCapture(this) })
            },
            initialiseValidationMessageChangeCapture: function () {
                var r = this.formValidationSelectorClassName + " ." + this.govukErrorMessageClassName, i = this;

                const elements = document.getElementsByClassName(r);
                elements.each(function () {
                    i.initialiseValidationMessageChange(this)
                })
            },
            initialiseValidationMessageChange: function (r) {
                var i = this; new MutationObserver(function (r) {
                    r.forEach(function (r) {
                        i.showErrorInPageTitle(i.mainErrorSummaryId, !1)
                    })
                }).observe(r, { childList: !0, subtree: !0 })
            },
            initialiseFieldErrorClassChangeCapture: function (r) {
                const e = document.getElementById(r);

                var i = e.closest("." + this.govukGroupClassName),
                    s = "#" + e.data("valmsg-for").replace(".", "_"),
                    i = (0 < i.find("." + this.fieldErrorClassName).length ? i.addClass(this.govukGroupErrorClassName) : i.removeClass(this.govukGroupErrorClassName), i.find(s)),
                    s = this.getErrorClassForTag(i.prop("tagName"));
                r.classList.contains(this.fieldErrorClassName) ? i.addClass(s) : i.removeClass(s)
            },
            getErrorClassForTag: function (r) {
                return "TEXTAREA" === r ? this.govukTextAreaErrorClassName : this.govukInputErrorClassName
            }
        },
        new InssAppErrorSummaryValidation);
inssAppErrorSummaryValidation.initialise();